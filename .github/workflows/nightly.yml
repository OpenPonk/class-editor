name: Nightly

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'

env:
  REPOSITORY_NAME: '${{ github.event.repository.name }}'
  PROJECT_NAME: 'openponk-${{ github.event.repository.name }}'
  VERSION: 'nightly'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  cache-name: zip-cache
  RUN_ID: ${{ github.run_id }}

jobs:

  build-linux:
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux
    name: 'Build Linux'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.2.1
        id: smalltalkci
        with:
          smalltalk-version: Pharo64-8.0
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-version }}
        shell: bash
        timeout-minutes: 10
      - name: Create zip
        run: chmod u+x .github/scripts/build-linux.sh; ./.github/scripts/build-linux.sh
      - name: Cache zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip

  build-win:
    runs-on: windows-latest
    env:
      PLATFORM: win
    name: 'Build Windows'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.2.1
        id: smalltalkci
        with:
          smalltalk-version: Pharo64-8.0
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-version }}
        shell: bash
        timeout-minutes: 15
      - name: Create zip
        run: ./.github/scripts/build-win.ps1
      - name: Cache zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip

  check-linux-cache:
    needs: build-linux
    runs-on: ubuntu-latest
    name: 'Check Linux zip is created'
    env:     
      PLATFORM: linux
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1

  check-win-cache:
    needs: build-win
    runs-on: windows-latest
    name: 'Check Windows zip is created'
    env:     
      PLATFORM: win
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1

  create-release:
    needs: [check-linux-cache, check-win-cache]
    runs-on: ubuntu-latest
    name: 'Re-create release'
    steps:
      - name: Re-create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: true
          title: "nightly"

  upload-linux-zip:
    needs: create-release
    runs-on: ubuntu-latest
    name: 'Upload Linux zip'
    env:
      PLATFORM: linux
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  upload-win-zip:
    needs: create-release
    runs-on: windows-latest
    name: 'Upload Windows zip'
    env:
      PLATFORM: win
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  create-dependent-matrix:
    runs-on: ubuntu-latest
    name: 'Find dependent repositories'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
      - name: Check list of repositories exists
        id: check-file
        run: test -f ./.github/dependent-repositories.txt || exit 1
      - name: Create dependent build matrix
        id: set-matrix
        run: echo "::set-output name=matrix::`cat ./.github/dependent-repositories.txt | tr -d " \t\n\r"`"

  build-dependent:
    needs: [check-linux-cache, check-win-cache, create-dependent-matrix]
    runs-on: ubuntu-latest
    name: 'Build dependent'
    if: ${{ contains(needs.create-dependent-matrix.outputs.matrix, '/') }}
    strategy:
      matrix: ${{fromJson(needs.create-dependent-matrix.outputs.matrix)}}
    steps:
      - name: Start ${{ matrix.repository }} build
        uses: benc-uk/workflow-dispatch@v1.1.0
        with:
          workflow: Nightly
          repo: ${{ matrix.repository }}
          token: ${{ secrets.WORKFLOW_ACCESS_TOKEN }}
